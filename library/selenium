#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2015 Daniel Davison and Software Freedom Conservancy
#  <https://github.com/seleniumhq/ansible-selenium>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# selenium: Ansible module for Selenium

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['stableinterface'],
                    'supported_by': 'community'}

DOCUMENTATION = '''
---
module: selenium
short_description: Selenium Infrastructure
description: Manage Selenium Hub and Nodes
version_added: "1.0"
author: Dan Davison (@ddavison)
options:
  role:
    description: Which role should be ran
    required: false
    default: 'standalone'
    choices:
      - "standalone"
      - "hub"
      - "node"
  state:
    description: Which state the program should be in
    required: true
    default: running
    choices:
      - "running"
      - "stopped"
      - "restarted"
  java:
    description: The path of the Java executable
    required: false
    default: '/usr/bin/java'
  logfile:
    description: Where to log the output of the hub / node
    required: false
    default: './selenium.log'
  javaargs:
    description: Java options to specify. e.g. Xmx1024M
    required: false
  version:
    description: Which version of Selenium to bring down. Can be branch name, hash, version, release, tag
    required: false
    default: 'master'
  path:
    description: Where to store the standalone server
    required: false
    default: '.'
  force:
    description: Force a redownload / restart of the standalone server
    required: false
    default: false
'''

EXAMPLES = '''
# Start a standalone server
- selenium:
    state: running

# Start a standalone server (specific version of selenium)
- selenium:
    version: 3.5.3
    state: running

# Start a basic grid that listens on port 4444
- selenium:
    role: hub
    state: running

# Start a grid that runs on port 4445
- selenium:
    role: hub
    state: running
    args:
      port: 4445

# Start the grid with greater memory
- selenium:
    role: hub
    state: running
    javaargs:
      - Xmx1024M
      - Xmy1024M

# Start a basic node that connects locally
- selenium:
    role: node
    state: running
    args:
      hubUrl: http://0.0.0.0:4444

# Restart a running node that was listening on a previous port
- selenium:
    role: node
    state: restarted
    args:
      hubUrl: http://0.0.0.0:4445

# Start a node that uses a JSON config and has a logfile
- template: src=config.json.j2 dest=config.json
- selenium:
    role: node
    state: running
    logfile: node.log
    args:
      nodeConfig: config.json
'''

JAR_URL = 'http://selenium-release.storage.googleapis.com/%s/selenium-server-standalone-%s.jar'

import signal
import urllib

from ansible.module_utils.basic import *

def is_running(module):
    """
    Whether or not the specific role in question is running right now.
    :param module:
    :return:
    """

    if not get_pid(module):
        return False
    else:
        return True


def get_pid(module):
    """
    Fetches the pid if it is running, for the role.
    :param module: the module
    :return:
    """

    pid_cmd = ['pgrep', '-f', '.*selenium-server-%s' %
               (module.params['version'])]

    try:
        return int(subprocess.check_output(pid_cmd).rstrip())
    except subprocess.CalledProcessError:
        return False


def start(module):
    """
    Start the Selenium standalone
    :param module:
    :return:
    """

    _, jar_file = download(module)

    changed = False
    role = module.params['role']
    if role != 'standalone':
      role = "-role %s" % role
    else:
      role = ''

    if not is_running(module):
        changed = True
        args = ''
        java_args = ''
        if module.params['args']:
            for (k, v) in module.params['args'].iteritems():
                args += '-%s %s ' % (k, v)

        if module.params['javaargs']:
            for arg in module.params['javaargs']:
                java_args += '-%s ' % arg

        java_executable = os.path.abspath(os.path.expandvars(module.params['java']))
        log_file = os.path.abspath(os.path.expandvars(module.params['logfile']))

        cmd = "%s %s -jar %s %s %s >> %s 2>&1 &" % (java_executable,
                                                          java_args,
                                                          jar_file,
                                                          role,
                                                          args,
                                                          log_file)

        os.setsid()

        #print cmd
        rc = os.system(cmd)

        if rc != 0:
            abort(module, 'Running the %s role returned code %s !' % (role, rc))

    pid = get_pid(module)
    if pid:
        return changed, pid
    else:
        abort(module, 'Couldnt fetch the pid of the running %s ! It may have ended abruptly.' % module.params['role'])


def stop(module):
    """
    Stop something
    :param module: the module
    :return:
    """

    changed = False
    pid = get_pid(module)

    if is_running(module):
        try:
            os.kill(pid, signal.SIGKILL)
            if not get_pid(module):
                changed = True
        except Exception as e:
            abort(module, 'Couldnt kill pid %s! Error was: %s' % (pid, e.message))

    return changed


def restart(module):
    """
    Restart it
    :param module: the module
    :return:
    """

    changed = stop(module)
    (c, pid) = start(module)
    return (c or changed), pid


def download(module):
    """
    Download jar from downloads page
    :param module: the module
    :return:
    """

    changed = False

    full_version = module.params['version']
    (major, minor, patch) = full_version.split('.')

    url = JAR_URL % ((major + '.' + minor), full_version)
    jar_file = '%s/selenium-server-%s.jar' % (os.path.abspath(os.path.expanduser(module.params['path'])),
                                              full_version)

    if not os.path.exists(jar_file) or module.params['force']:  # download if not already downloaded
        try:
            urllib.urlretrieve(url, jar_file)
            changed = True
        except Exception as e:
            abort(module, "Couldn't download %s. Are you using a valid version? Error was: %s" %
                  (url, e.message))
    return changed, jar_file


def finish(m, **kwargs):
    """
    Role is all down
    :param m: the module
    :param kwargs: all arguments
    :return:
    """

    m.exit_json(**kwargs)


def abort(m, msg):
    """
    Something wrong happened.. abort!
    :param m: the module
    :param msg: the message
    :return:
    """

    m.fail_json(msg=msg)


def main():
    """
    Main task / entry point
    :return:
    """

    module = AnsibleModule(
        argument_spec=dict(
            role=dict(choices=['standalone', 'hub', 'node'], default='standalone'),
            state=dict(choices=['running', 'stopped', 'restarted'], default='running'),
            version=dict(default='3.141.59'),
            path=dict(default='.'),
            force=dict(default=False, type='bool'),
            args=dict(required=False, default={}, type='dict'),
            java=dict(required=False, default='/usr/bin/java'),
            logfile=dict(required=False, default='./selenium.log'),
            javaargs=dict(required=False, default=[], type='list'),
        ),

        supports_check_mode=False,

        mutually_exclusive=[]
    )

    state = module.params['state']
    role = module.params['role']

    if state == 'running':
        (changed, pid) = start(module)
        finish(module, msg='%s is running' % role, changed=changed, pid=pid)
    elif state == 'stopped':
        changed = stop(module)
        finish(module, msg='%s is stopped' % role, changed=changed)
    elif state == 'restarted':
        (changed, pid) = restart(module)
        finish(module, msg='%s has restarted' % role, changed=changed, pid=pid)


main()
